//페이지 변경과 상관없이 계속 보여줄 ui는 layout.js에 작성하자.

import type { Metadata } from "next";
import "./globals.css";
import Link from "next/link";
import { Control } from "./Control";

export const metadata: Metadata = {
  title: "Web tutorials",
  description: "Generated by chaekeun using nextjs",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  //서버컴포넌트이므로 서버쪽에서 fetch명령이 수행되고 await
  // const resp = await fetch("http://localhost:/topics/", {
  //   cache: "no-store",
  // });
  //끝나면 json으로 바꿔서 topic 데이터에 할당
  // const topics = await resp.json();

  return (
    <html lang="en">
      <body>
        <h1>
          <Link href="/">Chaekeun's Github.io</Link>
        </h1>
        <div className="navbar">
          <Link href="/category/">This is Category</Link>
        </div>
        <ol>
          {/* 데이터로 글목록을 동적으로 생성한 다음에 결과를 서버쪽 폴더에 나름대로의 방법으로 저장*/}
          {/* 최종적으로 정적인 내용만 클라이언트로 전송하는 것(자바스크립트 빼고) */}
          {/* {topics.map((topic) => {
            return (
              <li key={topic.id}>
                <Link href={`/read/${topic.id}`}>{topic.title}</Link>
              </li>
            );
          })} */}
        </ol>

        {children}
        <Control></Control>
      </body>
      {/* main태그:page.tsx가 return한 값 */}
    </html>
  );
}
